---
// src/components/widget/DirectoryTree.astro

import { getCollection } from "astro:content";
import { url } from "../../utils/url-utils";
import WidgetLayout from "./WidgetLayout.astro";

interface PostLeaf {
	slug: string;
	title: string;
}

type DirectoryTree = {
	[key: string]: DirectoryTree | PostLeaf;
};

const allPosts = await getCollection(
	"posts",
	({ data }) => data.draft !== true,
);

const directoryTree: DirectoryTree = {};

allPosts.forEach((post) => {
	const pathParts = post.id.split("/");
	let currentLevel: DirectoryTree = directoryTree;

	for (let i = 0; i < pathParts.length - 1; i++) {
		const part = pathParts[i];
		if (!currentLevel[part]) {
			currentLevel[part] = {};
		}
		currentLevel = currentLevel[part] as DirectoryTree;
	}

	const fileName = pathParts[pathParts.length - 1];
	currentLevel[fileName] = {
		slug: post.slug,
		title: post.data.title,
	};
});

function renderTree(tree: DirectoryTree) {
	const keys = Object.keys(tree);
	if (keys.length === 0) return "";

	let html = '<ul class="sub-list hidden">';
	for (const key of keys) {
		const node = tree[key];
		// Comprobamos si es un 'PostLeaf' verificando la propiedad 'slug'
		if ("slug" in node) {
			html += `<li class="file"><a href="${url(`/posts/${node.slug}/`)}">${node.title}</a></li>`;
		} else {
			const hasChildren = Object.keys(node).length > 0;
			html += `<li class="folder"><span class="folder-toggle">${key}</span>`;
			if (hasChildren) {
				html += renderTree(node);
			}
			html += "</li>";
		}
	}
	html += "</ul>";
	return html;
}

const treeHtml = renderTree(directoryTree);
---

<WidgetLayout name="NavegaciÃ³n por Carpetas" id="directory-tree">
    <Fragment set:html={treeHtml.replace('class="sub-list hidden"', 'class="sub-list"')}/>
</WidgetLayout>

<script>
    const folderToggles = document.querySelectorAll('#directory-tree .folder-toggle');
    folderToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
            const subList = toggle.nextElementSibling;
            if (subList && subList.tagName === 'UL') {
                subList.classList.toggle('hidden');
                if (toggle.parentElement) {
                    toggle.parentElement.classList.toggle('expanded');
                }
            }
        });
    });
</script>

<style is:global>
    /* ... Tus estilos que ya funcionan ... */
</style>