---
// src/components/widget/DirectoryTree.astro

import { getCollection } from 'astro:content';
import { url } from '../../utils/url-utils';
import WidgetLayout from './WidgetLayout.astro';

const allPosts = await getCollection('posts', ({ data }) => data.draft !== true);

const directoryTree = {};
allPosts.forEach((post) => {
    const pathParts = post.slug.split('/');
    let currentLevel = directoryTree;

    // Recorremos las carpetas
    for (let i = 0; i < pathParts.length - 1; i++) {
        const part = pathParts[i];
        if (!currentLevel[part]) {
            currentLevel[part] = {};
        }
        currentLevel = currentLevel[part];
    }

    // A침adimos el archivo (la "hoja") al final de la rama
    const fileName = pathParts[pathParts.length - 1];
    currentLevel[fileName] = {
        slug: post.slug,
        title: post.data.title,
    };
});

function renderTree(tree) {
    const keys = Object.keys(tree);
    if (keys.length === 0) return '';

    let html = '<ul class="sub-list hidden">';
    for (const key of keys) {
        const node = tree[key];
        if (node.slug) {
            html += `<li class="file"><a href="${url(`/posts/${node.slug}/`)}">${node.title}</a></li>`;
        } 
        else {
            const hasChildren = Object.keys(node).length > 0;
            html += `<li class="folder"><span class="folder-toggle">${key}</span>`;
            if (hasChildren) {
                html += renderTree(node);
            }
            html += '</li>';
        }
    }
    html += '</ul>';
    return html;
}

const treeHtml = renderTree(directoryTree);
---

<WidgetLayout name="Navegaci칩n por Carpetas" id="directory-tree">
    <Fragment set:html={treeHtml.replace('class="sub-list hidden"', 'class="sub-list"')}/>
</WidgetLayout>

<script>
    const folderToggles = document.querySelectorAll('#directory-tree .folder-toggle');
    folderToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
            const subList = toggle.nextElementSibling;
            if (subList && subList.tagName === 'UL') {
                subList.classList.toggle('hidden');
                toggle.parentElement.classList.toggle('expanded');
            }
        });
    });
</script>

<style is:global>
    #directory-tree ul {
        list-style: none;
        padding-left: 1rem;
        margin-top: 0.25rem;
    }
    #directory-tree .sub-list.hidden {
        display: none;
    }
    #directory-tree li {
        margin-bottom: 0.25rem;
    }

    /* === Estilos para las CARPETAS === */
    #directory-tree .folder-toggle {
        cursor: pointer;
        display: flex;
        align-items: center;
        user-select: none;
        font-weight: 500; /* Hacemos el texto un poco m치s grueso */
        /* 1. Usamos el color de acento del tema */
        color: var(--color-accent);
        transition: filter 0.2s;
    }
    #directory-tree .folder-toggle:hover {
        /* Un peque침o brillo al pasar el cursor */
        filter: brightness(1.2);
    }
    /* 2. Icono de carpeta CERRADA */
    #directory-tree .folder > .folder-toggle::before {
        content: '游늬';
        margin-right: 0.5rem;
    }
    /* 3. Icono de carpeta ABIERTA (cuando est치 expandida) */
    #directory-tree .folder.expanded > .folder-toggle::before {
        content: '游늭';
    }
    
    /* === Estilos para los ARCHIVOS === */
    #directory-tree .file a {
        display: flex;
        align-items: center;
        text-decoration: none;
        /* 4. Este color ya respeta el modo Light/Dark */
        color: var(--color-text-secondary);
        font-size: 0.9em;
        transition: color 0.2s;
    }
    #directory-tree .file a:hover {
        color: var(--color-accent);
    }
    #directory-tree .file a::before {
        content: '游늯';
        margin-right: 0.5rem;
        opacity: 0.8;
    }
</style>